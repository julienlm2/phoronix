#!/usr/bin/env python

from subprocess import run
from ast import Break
from datetime import datetime
import subprocess
import os
import platform
import time
import math
import sys
import csv
import matplotlib.pyplot as plt

ARRAY_TIME = [] #Array pour export en .CSV
ARRAY_CPU_USAGE = []

trigger_erreur = True #déclencheur d'erreur

username = os.getlogin()

if len(sys.argv) > 3 or len(sys.argv) == 2 or len(sys.argv) == 1: #input validation 
    print("Erreur, Le Script prend 2 parametres (Temps d'execution et Nom (plusieurs caractères))")
    exit()
    
temps_voulu = int(sys.argv[1]) #récupération des arguments 
log_name=str(sys.argv[2])

temps_fin = time.time() + temps_voulu #calcul du temps d'exécution passé en paramètre

temperature = 0.0
ARRAY_TEMPERATURE = []


now = datetime.now()
today = datetime.now()
current_time = now.strftime("%H:%M:%S")
current_day = now.strftime("%d-%m-%y")

f = open('/home/'+username+'/.phoronix-test-suite/test-results/log_temp_'+log_name+'_'+current_day+'_'+current_time+'.txt', 'w') #création du fichier de log (cpu usage et température)

count = 0
while(time.time()<temps_fin):
    count = 0
    now = datetime.now()

    current_time = now.strftime("%H:%M:%S")

    Info_Sensors_Brut = run("sensors", capture_output=True).stdout #récupération des données thermiques
    Info_Usage_Brut = run(["mpstat","-P","ALL","2","1"], capture_output=True).stdout #récupération des données de charge CPU



    for line in Info_Sensors_Brut.splitlines():
        if "Core 0" in line.decode('utf-8'):
                    
                    line_split = line.decode('utf-8').split("+") #découpage de la string pour garder uniquement les données voulues (thermiques)
                
                    temp = line_split[1]
            
                    temp_split = temp.split("°")
                    temperature = float(temp_split[0])

                    for line in Info_Usage_Brut.splitlines():
                        if "all" in line.decode('utf-8') and count == 0:
                            count = 1
                            line_split_usage = line.decode('utf-8').split("   ") #découpage de la string pour garder uniquement les données voulues (thermiques)
                            usage = line_split_usage[1]

                           
                            print("Cpu :"+str(usage)+"%",end='  ')
                            f.write("Cpu :"+str(usage)+"%  ") #écriture de la charge cpu dans les logs
                            #-----------CSV----------------
                            usage = usage.replace(".",",")
                            ARRAY_CPU_USAGE.append(usage)
                            #------------------------------
                    #-----------CSV----------------
                    ARRAY_TIME.append(current_time)
                    #------------------------------

                    print(str(temperature)+"C","["+str(current_time)+"]")

                    if int(temperature) > 80 or int(temperature) < -40 and trigger_erreur == True:
                        errors = open('/home/'+username+'/.phoronix-test-suite/test-results/ERRORS_'+log_name+'_'+current_day+'_'+current_time+'.txt', 'w') #création du fichier d'erreurs
                        errors.writelines(f"Error, time : {current_time} - Temperature too high : {temperature}°C")
                        trigger_erreur = False

                    f.writelines(str(temperature)+"C") #écriture de la charge cpu dans les logs
                    f.writelines("  ["+str(current_time)+"]\n") #écriture du temps dans les logs

                    ARRAY_TEMPERATURE.append(math.trunc(temperature)) #modification du format de la température pour l'export en .CSV
                    
                    MAX = ARRAY_TEMPERATURE[0] #Calcul de la température Max
                    for i in range (len(ARRAY_TEMPERATURE)):
                       if (ARRAY_TEMPERATURE[i]>MAX):
                            MAX = ARRAY_TEMPERATURE[i]

                    MIN = ARRAY_TEMPERATURE[0] #Calcul de la température Min
                    for i in range (len(ARRAY_TEMPERATURE)):
                       if (ARRAY_TEMPERATURE[i]<MIN):
                            MIN = ARRAY_TEMPERATURE[i]

                    SOMME = 0        
                    for i in range (len(ARRAY_TEMPERATURE)):#Calcul de la moyenne de température
                        SOMME += ARRAY_TEMPERATURE[i]

                    MOYENNE = round(SOMME / len(ARRAY_TEMPERATURE),2)
                    time.sleep(0.001)

        


#___________EXPORT CSV__________
data = []
Csv_File_Name = '/home/'+username+'/.phoronix-test-suite/test-results/'+log_name+'_'+current_day+'_'+current_time+'Monitoring_Data.csv'
header = ['Cpu_Usage','Temperature','Time']
with open(Csv_File_Name,'w',newline="") as file:
    csvwriter = csv.writer(file)
    csvwriter.writerow(header)
    for i in range(len(ARRAY_TEMPERATURE)):
        data.append([ARRAY_CPU_USAGE[i],ARRAY_TEMPERATURE[i],ARRAY_TIME[i]])
    csvwriter.writerows(data)

#__________________PLOT____________________

for i in range(len(ARRAY_CPU_USAGE)):
    ARRAY_CPU_USAGE[i] = float(ARRAY_CPU_USAGE[i].replace(",","."))

x = ARRAY_TIME

y = ARRAY_TEMPERATURE

y2 = ARRAY_CPU_USAGE

plt.plot(x,y, label = "Température (°C)")
plt.plot(x,y2, label = "CPU Usage (%)")

plt.xticks(rotation = 45) 

plt.xlabel("Temps (H:M:S)")

plt.title("Température en fonction du temps")


plt.legend()

#__________________________________________

print("\nMAX TEMP = "+str(MAX)+"C\n")
print("\nMIN TEMP = "+str(MIN)+"C\n")
print("\nAVERAGE TEMP = "+str(MOYENNE)+"C\n")    

#Ecriture des stats dans le fichier log 
f.writelines("\nMAX TEMP = "+str(MAX)+"C\n")
f.writelines("\nMIN TEMP = "+str(MIN)+"C\n")
f.writelines("\nAVERAGE TEMP = "+str(MOYENNE)+"C\n")

plt.savefig('/home/'+username+'/.phoronix-test-suite/test-results/'+log_name+'_'+current_day+'_'+current_time+'graph.png')
plt.show()

f.close()
